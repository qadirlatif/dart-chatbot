OOP : The definition of data structures or objects with individual attributes or properties is done in object oriented programming,There are four pillars of object-oriented programming, Inheritance, polymorphism, encapsulation, and abstraction make up these four pillars.
Classes and objects : Introduction to Classes and Objects, Introduction to Class Creation and Instance Variable and Adding Methods to Classes
A class is a blueprint for creating objects, An object is an instance of a class that has its own set of properties and methods,
Let's create a simple class in it that represents a person, We'll give the class a name, age, and gender property, We'll also give it a method that prints out the person's information.
abstraction : abstraction is one of three central principles (along with encapsulation and inheritance), Through the process of abstraction, a programmer hides all but the relevant data about an object in order to reduce complexity and increase efficiency.
encapsulation : Encapsulation is a way to restrict the direct access to some components of an object, so users cannot access state values for all of the variables of a particular object, Encapsulation can be used to hide both data members and data functions or methods associated with an instantiated class or object.
Inheritance : inheritance is the mechanism of basing an object or class upon another object or class, retaining similar implementation, Also defined as deriving new classes from existing ones such as super class or base class and then forming them into a hierarchy of classes,
we can create a subclass by using the extends keyword, The subclass inherits all the properties and methods of the superclass, The subclass can also override the properties and methods of the superclass,
Sometimes you may want to override a method in a subclass to provide a different implementation, To do this in this, you can simply define a method with the same name as the superclass method,
When you create a subclass that inherits from a superclass, the subclass also inherits the superclass constructor, You can use the super keyword to call the superclass constructor from the subclass constructor.
Loops : there are many types of loops like,
1)for loops
example: 
for (int i = 0; i < 5; i++) {
  print("Hello World");
}
2)while 
example: 
int i = 0;
while (i < 5) {
  print("Hello World");
  i++;
}
3)do while
example:
int i=0;
do{
//code
}while(cond);.
Dart : Dart is a programming language developed by Google, It is a general-purpose programming language that is used to build web, server, and mobile applications, Dart is an object-oriented, class-based, garbage-collected language with C-style syntax, Dart can compile to either native code or JavaScript, It supports interfaces, mixins, abstract classes, reified generics, and type inference.
Data Types : It has several built-in types, including:

int : used to represent integer values, such as 1, 2, 3, etc
double : used to represent floating-point values
bool : used to represent boolean values, which can be either true or false
String : used to represent text or string values, such as "Hello, world!"
List : used to represent an ordered collection of objects
Map : used to represent a collection of key-value pairs.

Declare Variables : 
var myNumber: int = 5.
Operators :  Operators - Arithmetic:
It supports all the basic arithmetic operators, including +, -, *, /, and % (remainder or modulo), For example:

int a = 5;
int b = 3;
int c = a + b; 
int d = a * b; 
double e = a / b; 
int f = a % b;.
Relational Operators : Equality and Relational Operators:
It also has operators for comparing values, such as == (equals), != (not equals), > (greater than), < (less than), >= (greater than or equal to), and <= (less than or equal to) For example:

int a = 5;
int b = 3;
bool isEqual = a == b; // false
bool isNotEqual = a != b; // true
bool isGreater = a > b; // true
bool isLess = a < b; // false
bool isGreaterOrEqual = a >= b; // true
bool isLessOrEqual = a <= b; // false .
Logical Operators :
It supports the following logical operators:

&& (and)
|| (or)
! (not).
Switch Cases : Switch cases are used to execute a block of code based on the value of a variable, you can use the switch statement to execute a block of code based on the value of a variable, For example:

int number = 5;
switch (number) {
  case 1:
    print("One");
    break;
  case 2:
    print("Two");
    break;
  case 3:
    print("Three");
    break;
  case 4:
    print("Four");
    break;
  case 5:
    print("Five");
    break;
  default:
    print("Number not found");
}.
Functions : Functions are used to execute a block of code when they are called, you can use the function keyword to declare a function, For example:

void main() {
  printHello();
}

void printHello() {
  print("Hello");
}
Function Return Types:
Functions can return a value, you can use the return keyword to return a value from a function, For example:

void main() {
  print(add(5, 3));
}

int add(int a, int b) {
  return a + b;
}
Using the => Operator for Returning Expressions:
You can use the => operator to return an expression, you can use the => operator to return an expression, For example:

void main() {
  print(add(5, 3));
}

int add(int a, int b) => a + b;
Arguments and Functions:
Functions can take arguments, you can use the function arguments to pass values to a function, For example:

void main() {
  print(add(5, 3));
}

int add(int a, int b) {
  return a + b;
}
Optional Parameters :
You can make function parameters optional, you can use the [] operator to make a parameter optional, For example:

void main() {
  print(add(5));
}

int add(int a, [int b = 0]) {
  return a + b;
}.
if statements : If statements are used to execute a block of code if a condition is true, you can use the if statement to execute a block of code if a condition is true, For example:

if (5 > 3) {
  print("5 is greater than 3");
}.
Constructors : Introduction to Constructors and Named and Sugar Syntactic Constructors
Constructors  are special methods that are used to create and initialize it'sobjects of a class, Constructors can be used to set the initial values of the properties of an object when it is created, In this section, we'll look at different types of constructors,
There Are 4 Types of Constructors: 
1)Default
2)Parameterized
3)Sugar syntastic
4)Named Constructor
Default Constructor The default constructor in it is used to create an object of a class without passing any arguments, you do not explicitly define a constructor for a class, this language provides a default constructor,
Parameterized Constructor A parameterized constructor is used to create an object of a class by passing arguments to the constructor,
Named Constructor A named constructor is used to create an object of a class using a custom name, Named constructors are useful when you want to create objects in different ways,
Sugar Syntactic Constructor Sugar Syntactic Constructors is a shorthand way of writing constructors that can be used to create an object of a class in a more concise way.
Setters and Getters : 
1)Getters and getter is a method that is used to retrieve the value of a property, you can create a getter by defining a method with the get keyword followed by the name of the property you want to get.
2)Setters and setter is a method that is used to set the value of a property, you can create a setter by defining a method with the set keyword followed by the name of the property you want to set.
